'\" t
.\"     Title: SET ROLE
.\"    Author: The PostgreSQL Global Development Group
.\" Generator: DocBook XSL Stylesheets v1.75.1 <http://docbook.sf.net/>
.\"      Date: 2010-09-16
.\"    Manual: PostgreSQL 9.0.0 Documentation
.\"    Source: PostgreSQL 9.0.0
.\"  Language: English
.\"
.TH "SET ROLE" "7" "2010-09-16" "PostgreSQL 9.0.0" "PostgreSQL 9.0.0 Documentation"
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
SET_ROLE \- set the current user identifier of the current session
.\" SET ROLE
.SH "SYNOPSIS"
.sp
.nf
SET [ SESSION | LOCAL ] ROLE \fIrole_name\fR
SET [ SESSION | LOCAL ] ROLE NONE
RESET ROLE
.fi
.SH "DESCRIPTION"
.PP
This command sets the current user identifier of the current SQL session to be
\fIrole_name\fR\&. The role name can be written as either an identifier or a string literal\&. After
SET ROLE, permissions checking for SQL commands is carried out as though the named role were the one that had logged in originally\&.
.PP
The specified
\fIrole_name\fR
must be a role that the current session user is a member of\&. (If the session user is a superuser, any role can be selected\&.)
.PP
The
SESSION
and
LOCAL
modifiers act the same as for the regular
\fBSET\fR(7)
command\&.
.PP
The
NONE
and
RESET
forms reset the current user identifier to be the current session user identifier\&. These forms can be executed by any user\&.
.SH "NOTES"
.PP
Using this command, it is possible to either add privileges or restrict one\(aqs privileges\&. If the session user role has the
INHERITS
attribute, then it automatically has all the privileges of every role that it could
SET ROLE
to; in this case
SET ROLE
effectively drops all the privileges assigned directly to the session user and to the other roles it is a member of, leaving only the privileges available to the named role\&. On the other hand, if the session user role has the
NOINHERITS
attribute,
SET ROLE
drops the privileges assigned directly to the session user and instead acquires the privileges available to the named role\&.
.PP
In particular, when a superuser chooses to
SET ROLE
to a non\-superuser role, she loses her superuser privileges\&.
.PP
SET ROLE
has effects comparable to
SET SESSION AUTHORIZATION (\fBSET_SESSION_AUTHORIZATION\fR(7)), but the privilege checks involved are quite different\&. Also,
SET SESSION AUTHORIZATION
determines which roles are allowable for later
SET ROLE
commands, whereas changing roles with
SET ROLE
does not change the set of roles allowed to a later
SET ROLE\&.
.PP
SET ROLE
does not process session variables as specified by the role\(aqs
ALTER ROLE (\fBALTER_ROLE\fR(7))
settings; this only happens during login\&.
.PP
SET ROLE
cannot be used within a
SECURITY DEFINER
function\&.
.SH "EXAMPLES"
.sp
.if n \{\
.RS 4
.\}
.nf
SELECT SESSION_USER, CURRENT_USER;

 session_user | current_user 
\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-
 peter        | peter

SET ROLE \(aqpaul\(aq;

SELECT SESSION_USER, CURRENT_USER;

 session_user | current_user 
\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-
 peter        | paul
.fi
.if n \{\
.RE
.\}
.SH "COMPATIBILITY"
.PP
PostgreSQL
allows identifier syntax ("rolename"), while the SQL standard requires the role name to be written as a string literal\&. SQL does not allow this command during a transaction;
PostgreSQL
does not make this restriction because there is no reason to\&. The
SESSION
and
LOCAL
modifiers are a
PostgreSQL
extension, as is the
RESET
syntax\&.
.SH "SEE ALSO"
SET SESSION AUTHORIZATION (\fBSET_SESSION_AUTHORIZATION\fR(7))
