'\" t
.\"     Title: CREATE SCHEMA
.\"    Author: The PostgreSQL Global Development Group
.\" Generator: DocBook XSL Stylesheets v1.75.1 <http://docbook.sf.net/>
.\"      Date: 2010-09-16
.\"    Manual: PostgreSQL 9.0.0 Documentation
.\"    Source: PostgreSQL 9.0.0
.\"  Language: English
.\"
.TH "CREATE SCHEMA" "7" "2010-09-16" "PostgreSQL 9.0.0" "PostgreSQL 9.0.0 Documentation"
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
CREATE_SCHEMA \- define a new schema
.\" CREATE SCHEMA
.SH "SYNOPSIS"
.sp
.nf
CREATE SCHEMA \fIschema_name\fR [ AUTHORIZATION \fIuser_name\fR ] [ \fIschema_element\fR [ \&.\&.\&. ] ]
CREATE SCHEMA AUTHORIZATION \fIuser_name\fR [ \fIschema_element\fR [ \&.\&.\&. ] ]
.fi
.SH "DESCRIPTION"
.PP
CREATE SCHEMA
enters a new schema into the current database\&. The schema name must be distinct from the name of any existing schema in the current database\&.
.PP
A schema is essentially a namespace: it contains named objects (tables, data types, functions, and operators) whose names can duplicate those of other objects existing in other schemas\&. Named objects are accessed either by
\(lqqualifying\(rq
their names with the schema name as a prefix, or by setting a search path that includes the desired schema(s)\&. A
CREATE
command specifying an unqualified object name creates the object in the current schema (the one at the front of the search path, which can be determined with the function
\fBcurrent_schema\fR)\&.
.PP
Optionally,
CREATE SCHEMA
can include subcommands to create objects within the new schema\&. The subcommands are treated essentially the same as separate commands issued after creating the schema, except that if the
AUTHORIZATION
clause is used, all the created objects will be owned by that user\&.
.SH "PARAMETERS"
.PP
\fIschema_name\fR
.RS 4
The name of a schema to be created\&. If this is omitted, the user name is used as the schema name\&. The name cannot begin with
pg_, as such names are reserved for system schemas\&.
.RE
.PP
\fIuser_name\fR
.RS 4
The name of the user who will own the schema\&. If omitted, defaults to the user executing the command\&. Only superusers can create schemas owned by users other than themselves\&.
.RE
.PP
\fIschema_element\fR
.RS 4
An SQL statement defining an object to be created within the schema\&. Currently, only
CREATE TABLE,
CREATE VIEW,
CREATE INDEX,
CREATE SEQUENCE,
CREATE TRIGGER
and
GRANT
are accepted as clauses within
CREATE SCHEMA\&. Other kinds of objects may be created in separate commands after the schema is created\&.
.RE
.SH "NOTES"
.PP
To create a schema, the invoking user must have the
CREATE
privilege for the current database\&. (Of course, superusers bypass this check\&.)
.SH "EXAMPLES"
.PP
Create a schema:
.sp
.if n \{\
.RS 4
.\}
.nf
CREATE SCHEMA myschema;
.fi
.if n \{\
.RE
.\}
.PP
Create a schema for user
joe; the schema will also be named
joe:
.sp
.if n \{\
.RS 4
.\}
.nf
CREATE SCHEMA AUTHORIZATION joe;
.fi
.if n \{\
.RE
.\}
.PP
Create a schema and create a table and view within it:
.sp
.if n \{\
.RS 4
.\}
.nf
CREATE SCHEMA hollywood
    CREATE TABLE films (title text, release date, awards text[])
    CREATE VIEW winners AS
        SELECT title, release FROM films WHERE awards IS NOT NULL;
.fi
.if n \{\
.RE
.\}
.sp
Notice that the individual subcommands do not end with semicolons\&.
.PP
The following is an equivalent way of accomplishing the same result:
.sp
.if n \{\
.RS 4
.\}
.nf
CREATE SCHEMA hollywood;
CREATE TABLE hollywood\&.films (title text, release date, awards text[]);
CREATE VIEW hollywood\&.winners AS
    SELECT title, release FROM hollywood\&.films WHERE awards IS NOT NULL;
.fi
.if n \{\
.RE
.\}
.SH "COMPATIBILITY"
.PP
The SQL standard allows a
DEFAULT CHARACTER SET
clause in
CREATE SCHEMA, as well as more subcommand types than are presently accepted by
PostgreSQL\&.
.PP
The SQL standard specifies that the subcommands in
CREATE SCHEMA
can appear in any order\&. The present
PostgreSQL
implementation does not handle all cases of forward references in subcommands; it might sometimes be necessary to reorder the subcommands in order to avoid forward references\&.
.PP
According to the SQL standard, the owner of a schema always owns all objects within it\&.
PostgreSQL
allows schemas to contain objects owned by users other than the schema owner\&. This can happen only if the schema owner grants the
CREATE
privilege on his schema to someone else\&.
.SH "SEE ALSO"
ALTER SCHEMA (\fBALTER_SCHEMA\fR(7)), DROP SCHEMA (\fBDROP_SCHEMA\fR(7))
