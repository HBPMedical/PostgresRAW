'\" t
.\"     Title: BEGIN
.\"    Author: The PostgreSQL Global Development Group
.\" Generator: DocBook XSL Stylesheets v1.75.1 <http://docbook.sf.net/>
.\"      Date: 2010-09-16
.\"    Manual: PostgreSQL 9.0.0 Documentation
.\"    Source: PostgreSQL 9.0.0
.\"  Language: English
.\"
.TH "BEGIN" "7" "2010-09-16" "PostgreSQL 9.0.0" "PostgreSQL 9.0.0 Documentation"
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
BEGIN \- start a transaction block
.\" BEGIN
.SH "SYNOPSIS"
.sp
.nf
BEGIN [ WORK | TRANSACTION ] [ \fItransaction_mode\fR [, \&.\&.\&.] ]

where \fItransaction_mode\fR is one of:

    ISOLATION LEVEL { SERIALIZABLE | REPEATABLE READ | READ COMMITTED | READ UNCOMMITTED }
    READ WRITE | READ ONLY
.fi
.SH "DESCRIPTION"
.PP
BEGIN
initiates a transaction block, that is, all statements after a
BEGIN
command will be executed in a single transaction until an explicit
\fBCOMMIT\fR(7)
or
\fBROLLBACK\fR(7)
is given\&. By default (without
BEGIN),
PostgreSQL
executes transactions in
\(lqautocommit\(rq
mode, that is, each statement is executed in its own transaction and a commit is implicitly performed at the end of the statement (if execution was successful, otherwise a rollback is done)\&.
.PP
Statements are executed more quickly in a transaction block, because transaction start/commit requires significant CPU and disk activity\&. Execution of multiple statements inside a transaction is also useful to ensure consistency when making several related changes: other sessions will be unable to see the intermediate states wherein not all the related updates have been done\&.
.PP
If the isolation level or read/write mode is specified, the new transaction has those characteristics, as if
SET TRANSACTION (\fBSET_TRANSACTION\fR(7))
was executed\&.
.SH "PARAMETERS"
.PP
WORK, TRANSACTION
.RS 4
Optional key words\&. They have no effect\&.
.RE
.PP
Refer to
SET TRANSACTION (\fBSET_TRANSACTION\fR(7))
for information on the meaning of the other parameters to this statement\&.
.SH "NOTES"
.PP
START TRANSACTION (\fBSTART_TRANSACTION\fR(7))
has the same functionality as
BEGIN\&.
.PP
Use
\fBCOMMIT\fR(7)
or
\fBROLLBACK\fR(7)
to terminate a transaction block\&.
.PP
Issuing
BEGIN
when already inside a transaction block will provoke a warning message\&. The state of the transaction is not affected\&. To nest transactions within a transaction block, use savepoints (see
\fBSAVEPOINT\fR(7))\&.
.PP
For reasons of backwards compatibility, the commas between successive
\fItransaction_modes\fR
can be omitted\&.
.SH "EXAMPLES"
.PP
To begin a transaction block:
.sp
.if n \{\
.RS 4
.\}
.nf
BEGIN;
.fi
.if n \{\
.RE
.\}
.SH "COMPATIBILITY"
.PP
BEGIN
is a
PostgreSQL
language extension\&. It is equivalent to the SQL\-standard command
START TRANSACTION (\fBSTART_TRANSACTION\fR(7)), whose reference page contains additional compatibility information\&.
.PP
Incidentally, the
BEGIN
key word is used for a different purpose in embedded SQL\&. You are advised to be careful about the transaction semantics when porting database applications\&.
.SH "SEE ALSO"
\fBCOMMIT\fR(7), \fBROLLBACK\fR(7), START TRANSACTION (\fBSTART_TRANSACTION\fR(7)), \fBSAVEPOINT\fR(7)
