'\" t
.\"     Title: psql
.\"    Author: The PostgreSQL Global Development Group
.\" Generator: DocBook XSL Stylesheets v1.75.1 <http://docbook.sf.net/>
.\"      Date: 2010-09-16
.\"    Manual: PostgreSQL 9.0.0 Documentation
.\"    Source: PostgreSQL 9.0.0
.\"  Language: English
.\"
.TH "PSQL" "1" "2010-09-16" "PostgreSQL 9.0.0" "PostgreSQL 9.0.0 Documentation"
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
psql \- PostgreSQL interactive terminal
.\" psql
.SH "SYNOPSIS"
.HP \w'psql\ 'u
psql [\fIoption\fR...] [\fIdbname\fR\ [\fIusername\fR]]
.SH "DESCRIPTION"
.PP
psql
is a terminal\-based front\-end to
PostgreSQL\&. It enables you to type in queries interactively, issue them to
PostgreSQL, and see the query results\&. Alternatively, input can be from a file\&. In addition, it provides a number of meta\-commands and various shell\-like features to facilitate writing scripts and automating a wide variety of tasks\&.
.SH "OPTIONS"
.PP
\fB\-a\fR, \fB\-\-echo\-all\fR
.RS 4
Print all input lines to standard output as they are read\&. This is more useful for script processing than interactive mode\&. This is equivalent to setting the variable
\fIECHO\fR
to
all\&.
.RE
.PP
\fB\-A\fR, \fB\-\-no\-align\fR
.RS 4
Switches to unaligned output mode\&. (The default output mode is otherwise aligned\&.)
.RE
.PP
\fB\-c \fR\fB\fIcommand\fR\fR, \fB\-\-command \fR\fB\fIcommand\fR\fR
.RS 4
Specifies that
psql
is to execute one command string,
\fIcommand\fR, and then exit\&. This is useful in shell scripts\&. Start\-up files (psqlrc
and
~/\&.psqlrc) are ignored with this option\&.
.sp
\fIcommand\fR
must be either a command string that is completely parsable by the server (i\&.e\&., it contains no
psql\-specific features), or a single backslash command\&. Thus you cannot mix
SQL
and
psql
meta\-commands with this option\&. To achieve that, you could pipe the string into
psql, like this:
echo \(aq\ex \e\e SELECT * FROM foo;\(aq | psql\&. (\e\e
is the separator meta\-command\&.)
.sp
If the command string contains multiple SQL commands, they are processed in a single transaction, unless there are explicit
BEGIN/COMMIT
commands included in the string to divide it into multiple transactions\&. This is different from the behavior when the same string is fed to
psql\(aqs standard input\&.
.RE
.PP
\fB\-d \fR\fB\fIdbname\fR\fR, \fB\-\-dbname \fR\fB\fIdbname\fR\fR
.RS 4
Specifies the name of the database to connect to\&. This is equivalent to specifying
\fIdbname\fR
as the first non\-option argument on the command line\&.
.sp
If this parameter contains an
=
sign, it is treated as a
\fIconninfo\fR
string\&. See
Section 31.1, \(lqDatabase Connection Control Functions\(rq, in the documentation
for more information\&.
.RE
.PP
\fB\-e\fR, \fB\-\-echo\-queries\fR
.RS 4
Copy all SQL commands sent to the server to standard output as well\&. This is equivalent to setting the variable
\fIECHO\fR
to
queries\&.
.RE
.PP
\fB\-E\fR, \fB\-\-echo\-hidden\fR
.RS 4
Echo the actual queries generated by
\ed
and other backslash commands\&. You can use this to study
psql\(aqs internal operations\&. This is equivalent to setting the variable
\fIECHO_HIDDEN\fR
from within
psql\&.
.RE
.PP
\fB\-f \fR\fB\fIfilename\fR\fR, \fB\-\-file \fR\fB\fIfilename\fR\fR
.RS 4
Use the file
\fIfilename\fR
as the source of commands instead of reading commands interactively\&. After the file is processed,
psql
terminates\&. This is in many ways equivalent to the internal command
\ei\&.
.sp
If
\fIfilename\fR
is
\-
(hyphen), then standard input is read\&.
.sp
Using this option is subtly different from writing
psql < \fIfilename\fR\&. In general, both will do what you expect, but using
\-f
enables some nice features such as error messages with line numbers\&. There is also a slight chance that using this option will reduce the start\-up overhead\&. On the other hand, the variant using the shell\(aqs input redirection is (in theory) guaranteed to yield exactly the same output you would have received had you entered everything by hand\&.
.RE
.PP
\fB\-F \fR\fB\fIseparator\fR\fR, \fB\-\-field\-separator \fR\fB\fIseparator\fR\fR
.RS 4
Use
\fIseparator\fR
as the field separator for unaligned output\&. This is equivalent to
\epset fieldsep
or
\ef\&.
.RE
.PP
\fB\-h \fR\fB\fIhostname\fR\fR, \fB\-\-host \fR\fB\fIhostname\fR\fR
.RS 4
Specifies the host name of the machine on which the server is running\&. If the value begins with a slash, it is used as the directory for the Unix\-domain socket\&.
.RE
.PP
\fB\-H\fR, \fB\-\-html\fR
.RS 4
Turn on
HTML
tabular output\&. This is equivalent to
\epset format html
or the
\eH
command\&.
.RE
.PP
\fB\-l\fR, \fB\-\-list\fR
.RS 4
List all available databases, then exit\&. Other non\-connection options are ignored\&. This is similar to the internal command
\elist\&.
.RE
.PP
\fB\-L \fR\fB\fIfilename\fR\fR, \fB\-\-log\-file \fR\fB\fIfilename\fR\fR
.RS 4
Write all query output into file
\fIfilename\fR, in addition to the normal output destination\&.
.RE
.PP
\fB\-n\fR, \fB\-\-no\-readline\fR
.RS 4
Do not use readline for line editing and do not use the history\&. This can be useful to turn off tab expansion when cutting and pasting\&.
.RE
.PP
\fB\-o \fR\fB\fIfilename\fR\fR, \fB\-\-output \fR\fB\fIfilename\fR\fR
.RS 4
Put all query output into file
\fIfilename\fR\&. This is equivalent to the command
\eo\&.
.RE
.PP
\fB\-p \fR\fB\fIport\fR\fR, \fB\-\-port \fR\fB\fIport\fR\fR
.RS 4
Specifies the TCP port or the local Unix\-domain socket file extension on which the server is listening for connections\&. Defaults to the value of the
\fBPGPORT\fR
environment variable or, if not set, to the port specified at compile time, usually 5432\&.
.RE
.PP
\fB\-P \fR\fB\fIassignment\fR\fR, \fB\-\-pset \fR\fB\fIassignment\fR\fR
.RS 4
Specifies printing options, in the style of
\epset\&. Note that here you have to separate name and value with an equal sign instead of a space\&. For example, to set the output format to LaTeX, you could write
\-P format=latex\&.
.RE
.PP
\fB\-q\fR, \fB\-\-quiet\fR
.RS 4
Specifies that
psql
should do its work quietly\&. By default, it prints welcome messages and various informational output\&. If this option is used, none of this happens\&. This is useful with the
\fB\-c\fR
option\&. Within
psql
you can also set the
\fIQUIET\fR
variable to achieve the same effect\&.
.RE
.PP
\fB\-R \fR\fB\fIseparator\fR\fR, \fB\-\-record\-separator \fR\fB\fIseparator\fR\fR
.RS 4
Use
\fIseparator\fR
as the record separator for unaligned output\&. This is equivalent to the
\epset recordsep
command\&.
.RE
.PP
\fB\-s\fR, \fB\-\-single\-step\fR
.RS 4
Run in single\-step mode\&. That means the user is prompted before each command is sent to the server, with the option to cancel execution as well\&. Use this to debug scripts\&.
.RE
.PP
\fB\-S\fR, \fB\-\-single\-line\fR
.RS 4
Runs in single\-line mode where a newline terminates an SQL command, as a semicolon does\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
This mode is provided for those who insist on it, but you are not necessarily encouraged to use it\&. In particular, if you mix
SQL
and meta\-commands on a line the order of execution might not always be clear to the inexperienced user\&.
.sp .5v
.RE
.RE
.PP
\fB\-t\fR, \fB\-\-tuples\-only\fR
.RS 4
Turn off printing of column names and result row count footers, etc\&. This is equivalent to the
\et
command\&.
.RE
.PP
\fB\-T \fR\fB\fItable_options\fR\fR, \fB\-\-table\-attr \fR\fB\fItable_options\fR\fR
.RS 4
Specifies options to be placed within the
HTMLtable
tag\&. See
\epset
for details\&.
.RE
.PP
\fB\-U \fR\fB\fIusername\fR\fR, \fB\-\-username \fR\fB\fIusername\fR\fR
.RS 4
Connect to the database as the user
\fIusername\fR
instead of the default\&. (You must have permission to do so, of course\&.)
.RE
.PP
\fB\-v \fR\fB\fIassignment\fR\fR, \fB\-\-set \fR\fB\fIassignment\fR\fR, \fB\-\-variable \fR\fB\fIassignment\fR\fR
.RS 4
Perform a variable assignment, like the
\eset
internal command\&. Note that you must separate name and value, if any, by an equal sign on the command line\&. To unset a variable, leave off the equal sign\&. To just set a variable without a value, use the equal sign but leave off the value\&. These assignments are done during a very early stage of start\-up, so variables reserved for internal purposes might get overwritten later\&.
.RE
.PP
\fB\-V\fR, \fB\-\-version\fR
.RS 4
Print the
psql
version and exit\&.
.RE
.PP
\fB\-w\fR, \fB\-\-no\-password\fR
.RS 4
Never issue a password prompt\&. If the server requires password authentication and a password is not available by other means such as a
\&.pgpass
file, the connection attempt will fail\&. This option can be useful in batch jobs and scripts where no user is present to enter a password\&.
.sp
Note that this option will remain set for the entire session, and so it affects uses of the meta\-command
\econnect
as well as the initial connection attempt\&.
.RE
.PP
\fB\-W\fR, \fB\-\-password\fR
.RS 4
Force
psql
to prompt for a password before connecting to a database\&.
.sp
This option is never essential, since
psql
will automatically prompt for a password if the server demands password authentication\&. However,
psql
will waste a connection attempt finding out that the server wants a password\&. In some cases it is worth typing
\fB\-W\fR
to avoid the extra connection attempt\&.
.sp
Note that this option will remain set for the entire session, and so it affects uses of the meta\-command
\econnect
as well as the initial connection attempt\&.
.RE
.PP
\fB\-x\fR, \fB\-\-expanded\fR
.RS 4
Turn on the expanded table formatting mode\&. This is equivalent to the
\ex
command\&.
.RE
.PP
\fB\-X,\fR, \fB\-\-no\-psqlrc\fR
.RS 4
Do not read the start\-up file (neither the system\-wide
psqlrc
file nor the user\(aqs
~/\&.psqlrc
file)\&.
.RE
.PP
\fB\-1\fR, \fB\-\-single\-transaction\fR
.RS 4
When
psql
executes a script with the
\fB\-f\fR
option, adding this option wraps
BEGIN/COMMIT
around the script to execute it as a single transaction\&. This ensures that either all the commands complete successfully, or no changes are applied\&.
.sp
If the script itself uses
BEGIN,
COMMIT, or
ROLLBACK, this option will not have the desired effects\&. Also, if the script contains any command that cannot be executed inside a transaction block, specifying this option will cause that command (and hence the whole transaction) to fail\&.
.RE
.PP
\fB\-?\fR, \fB\-\-help\fR
.RS 4
Show help about
psql
command line arguments, and exit\&.
.RE
.SH "EXIT STATUS"
.PP
psql
returns 0 to the shell if it finished normally, 1 if a fatal error of its own occurs (e\&.g\&. out of memory, file not found), 2 if the connection to the server went bad and the session was not interactive, and 3 if an error occurred in a script and the variable
\fION_ERROR_STOP\fR
was set\&.
.SH "USAGE"
.SS "Connecting To A Database"
.PP
psql
is a regular
PostgreSQL
client application\&. In order to connect to a database you need to know the name of your target database, the host name and port number of the server, and what user name you want to connect as\&.
psql
can be told about those parameters via command line options, namely
\fB\-d\fR,
\fB\-h\fR,
\fB\-p\fR, and
\fB\-U\fR
respectively\&. If an argument is found that does not belong to any option it will be interpreted as the database name (or the user name, if the database name is already given)\&. Not all of these options are required; there are useful defaults\&. If you omit the host name,
psql
will connect via a Unix\-domain socket to a server on the local host, or via TCP/IP to
localhost
on machines that don\(aqt have Unix\-domain sockets\&. The default port number is determined at compile time\&. Since the database server uses the same default, you will not have to specify the port in most cases\&. The default user name is your Unix user name, as is the default database name\&. Note that you cannot just connect to any database under any user name\&. Your database administrator should have informed you about your access rights\&.
.PP
When the defaults aren\(aqt quite right, you can save yourself some typing by setting the environment variables
\fBPGDATABASE\fR,
\fBPGHOST\fR,
\fBPGPORT\fR
and/or
\fBPGUSER\fR
to appropriate values\&. (For additional environment variables, see
Section 31.13, \(lqEnvironment Variables\(rq, in the documentation\&.) It is also convenient to have a
~/\&.pgpass
file to avoid regularly having to type in passwords\&. See
Section 31.14, \(lqThe Password File\(rq, in the documentation
for more information\&.
.PP
An alternative way to specify connection parameters is in a
\fIconninfo\fR
string, which is used instead of a database name\&. This mechanism give you very wide control over the connection\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
$ \fBpsql "service=myservice sslmode=require"\fR
.fi
.if n \{\
.RE
.\}
.sp
This way you can also use LDAP for connection parameter lookup as described in
Section 31.16, \(lqLDAP Lookup of Connection Parameters\(rq, in the documentation\&. See
Section 31.1, \(lqDatabase Connection Control Functions\(rq, in the documentation
for more information on all the available connection options\&.
.PP
If the connection could not be made for any reason (e\&.g\&., insufficient privileges, server is not running on the targeted host, etc\&.),
psql
will return an error and terminate\&.
.SS "Entering SQL Commands"
.PP
In normal operation,
psql
provides a prompt with the name of the database to which
psql
is currently connected, followed by the string
=>\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
$ \fBpsql testdb\fR
psql (9\&.0\&.0)
Type "help" for help\&.

testdb=>
.fi
.if n \{\
.RE
.\}
.PP
At the prompt, the user can type in
SQL
commands\&. Ordinarily, input lines are sent to the server when a command\-terminating semicolon is reached\&. An end of line does not terminate a command\&. Thus commands can be spread over several lines for clarity\&. If the command was sent and executed without error, the results of the command are displayed on the screen\&.
.PP
Whenever a command is executed,
psql
also polls for asynchronous notification events generated by
\fBLISTEN\fR(7)
and
\fBNOTIFY\fR(7)\&.
.SS "Meta\-Commands"
.PP
Anything you enter in
psql
that begins with an unquoted backslash is a
psql
meta\-command that is processed by
psql
itself\&. These commands make
psql
more useful for administration or scripting\&. Meta\-commands are often called slash or backslash commands\&.
.PP
The format of a
psql
command is the backslash, followed immediately by a command verb, then any arguments\&. The arguments are separated from the command verb and each other by any number of whitespace characters\&.
.PP
To include whitespace into an argument you can quote it with a single quote\&. To include a single quote into such an argument, use two single quotes\&. Anything contained in single quotes is furthermore subject to C\-like substitutions for
\en
(new line),
\et
(tab),
\e\fIdigits\fR
(octal), and
\ex\fIdigits\fR
(hexadecimal)\&.
.PP
If an unquoted argument begins with a colon (:), it is taken as a
psql
variable and the value of the variable is used as the argument instead\&. If the variable name is surrounded by single quotes (e\&.g\&.
:\(aqvar\(aq), it will be escaped as an SQL literal and the result will be used as the argument\&. If the variable name is surrounded by double quotes, it will be escaped as an SQL identifier and the result will be used as the argument\&.
.PP
Arguments that are enclosed in backquotes (`) are taken as a command line that is passed to the shell\&. The output of the command (with any trailing newline removed) is taken as the argument value\&. The above escape sequences also apply in backquotes\&.
.PP
Some commands take an
SQL
identifier (such as a table name) as argument\&. These arguments follow the syntax rules of
SQL: Unquoted letters are forced to lowercase, while double quotes (") protect letters from case conversion and allow incorporation of whitespace into the identifier\&. Within double quotes, paired double quotes reduce to a single double quote in the resulting name\&. For example,
FOO"BAR"BAZ
is interpreted as
fooBARbaz, and
"A weird"" name"
becomes
A weird" name\&.
.PP
Parsing for arguments stops at the end of the line, or when another unquoted backslash is found\&. An unquoted backslash is taken as the beginning of a new meta\-command\&. The special sequence
\e\e
(two backslashes) marks the end of arguments and continues parsing
SQL
commands, if any\&. That way
SQL
and
psql
commands can be freely mixed on a line\&. But in any case, the arguments of a meta\-command cannot continue beyond the end of the line\&.
.PP
The following meta\-commands are defined:
.PP
\ea
.RS 4
If the current table output format is unaligned, it is switched to aligned\&. If it is not unaligned, it is set to unaligned\&. This command is kept for backwards compatibility\&. See
\epset
for a more general solution\&.
.RE
.PP
\ecd [ \fIdirectory\fR ]
.RS 4
Changes the current working directory to
\fIdirectory\fR\&. Without argument, changes to the current user\(aqs home directory\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBTip\fR
.ps -1
.br
To print your current working directory, use
\e! pwd\&.
.sp .5v
.RE
.RE
.PP
\eC [ \fItitle\fR ]
.RS 4
Sets the title of any tables being printed as the result of a query or unset any such title\&. This command is equivalent to
\epset title \fItitle\fR\&. (The name of this command derives from
\(lqcaption\(rq, as it was previously only used to set the caption in an
HTML
table\&.)
.RE
.PP
\econnect (or \ec) [ \fIdbname\fR [ \fIusername\fR ] [ \fIhost\fR ] [ \fIport\fR ] ]
.RS 4
Establishes a new connection to a
PostgreSQL
server\&. If the new connection is successfully made, the previous connection is closed\&. If any of
\fIdbname\fR,
\fIusername\fR,
\fIhost\fR
or
\fIport\fR
are omitted or specified as
\-, the value of that parameter from the previous connection is used\&. If there is no previous connection, the
libpq
default for the parameter\(aqs value is used\&.
.sp
If the connection attempt failed (wrong user name, access denied, etc\&.), the previous connection will only be kept if
psql
is in interactive mode\&. When executing a non\-interactive script, processing will immediately stop with an error\&. This distinction was chosen as a user convenience against typos on the one hand, and a safety mechanism that scripts are not accidentally acting on the wrong database on the other hand\&.
.RE
.PP
\ecopy { \fItable\fR [ ( \fIcolumn_list\fR ) ] | ( \fIquery\fR ) } { from | to } { \fIfilename\fR | stdin | stdout | pstdin | pstdout } [ with ] [ binary ] [ oids ] [ delimiter [ as ] \(aq\fIcharacter\fR\(aq ] [ null [ as ] \(aq\fIstring\fR\(aq ] [ csv [ header ] [ quote [ as ] \(aq\fIcharacter\fR\(aq ] [ escape [ as ] \(aq\fIcharacter\fR\(aq ] [ force quote \fIcolumn_list\fR | * ] [ force not null \fIcolumn_list\fR ] ]
.RS 4
Performs a frontend (client) copy\&. This is an operation that runs an
SQL\fBCOPY\fR(7)
command, but instead of the server reading or writing the specified file,
psql
reads or writes the file and routes the data between the server and the local file system\&. This means that file accessibility and privileges are those of the local user, not the server, and no SQL superuser privileges are required\&.
.sp
The syntax of the command is similar to that of the
SQL\fBCOPY\fR(7)
command\&. Note that, because of this, special parsing rules apply to the
\ecopy
command\&. In particular, the variable substitution rules and backslash escapes do not apply\&.
.sp
\ecopy \&.\&.\&. from stdin | to stdout
reads/writes based on the command input and output respectively\&. All rows are read from the same source that issued the command, continuing until
\e\&.
is read or the stream reaches
EOF\&. Output is sent to the same place as command output\&. To read/write from
psql\(aqs standard input or output, use
pstdin
or
pstdout\&. This option is useful for populating tables in\-line within a SQL script file\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBTip\fR
.ps -1
.br
This operation is not as efficient as the
SQLCOPY
command because all data must pass through the client/server connection\&. For large amounts of data the
SQL
command might be preferable\&.
.sp .5v
.RE
.RE
.PP
\ecopyright
.RS 4
Shows the copyright and distribution terms of
PostgreSQL\&.
.RE
.PP
\ed[S+] [ \fIpattern\fR ]
.RS 4
For each relation (table, view, index, or sequence) matching the
\fIpattern\fR, show all columns, their types, the tablespace (if not the default) and any special attributes such as
NOT NULL
or defaults\&. Associated indexes, constraints, rules, and triggers are also shown\&. (\(lqMatching the pattern\(rq
is defined in
Patterns
below\&.)
.sp
The command form
\ed+
is identical, except that more information is displayed: any comments associated with the columns of the table are shown, as is the presence of OIDs in the table, and the view definition if the relation is a view\&.
.sp
By default, only user\-created objects are shown; supply a pattern or the
S
modifier to include system objects\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
If
\ed
is used without a
\fIpattern\fR
argument, it is equivalent to
\edtvs
which will show a list of all visible tables, views, and sequences\&. This is purely a convenience measure\&.
.sp .5v
.RE
.RE
.PP
\eda[S] [ \fIpattern\fR ]
.RS 4
Lists aggregate functions, together with their return type and the data types they operate on\&. If
\fIpattern\fR
is specified, only aggregates whose names match the pattern are shown\&. By default, only user\-created objects are shown; supply a pattern or the
S
modifier to include system objects\&.
.RE
.PP
\edb[+] [ \fIpattern\fR ]
.RS 4
Lists tablespaces\&. If
\fIpattern\fR
is specified, only tablespaces whose names match the pattern are shown\&. If
+
is appended to the command name, each object is listed with its associated permissions\&.
.RE
.PP
\edc[S] [ \fIpattern\fR ]
.RS 4
Lists conversions between character\-set encodings\&. If
\fIpattern\fR
is specified, only conversions whose names match the pattern are listed\&. By default, only user\-created objects are shown; supply a pattern or the
S
modifier to include system objects\&.
.RE
.PP
\edC [ \fIpattern\fR ]
.RS 4
Lists type casts\&. If
\fIpattern\fR
is specified, only casts whose source or target types match the pattern are listed\&.
.RE
.PP
\edd[S] [ \fIpattern\fR ]
.RS 4
Shows the descriptions of objects matching the
\fIpattern\fR, or of all visible objects if no argument is given\&. But in either case, only objects that have a description are listed\&. By default, only user\-created objects are shown; supply a pattern or the
S
modifier to include system objects\&.
\(lqObject\(rq
covers aggregates, functions, operators, types, relations (tables, views, indexes, sequences), large objects, rules, and triggers\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
=> \fB\edd version\fR
                     Object descriptions
   Schema   |  Name   |  Object  |        Description
\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
 pg_catalog | version | function | PostgreSQL version string
(1 row)
.fi
.if n \{\
.RE
.\}
.sp
Descriptions for objects can be created with the
\fBCOMMENT\fR(7)SQL
command\&.
.RE
.PP
\eddp [ \fIpattern\fR ]
.RS 4
Lists default access privilege settings\&. An entry is shown for each role (and schema, if applicable) for which the default privilege settings have been changed from the built\-in defaults\&. If
\fIpattern\fR
is specified, only entries whose role name or schema name matches the pattern are listed\&.
.sp
The
ALTER DEFAULT PRIVILEGES (\fBALTER_DEFAULT_PRIVILEGES\fR(7))
command is used to set default access privileges\&. The meaning of the privilege display is explained under
\fBGRANT\fR(7)\&.
.RE
.PP
\edD[S] [ \fIpattern\fR ]
.RS 4
Lists domains\&. If
\fIpattern\fR
is specified, only domains whose names match the pattern are shown\&. By default, only user\-created objects are shown; supply a pattern or the
S
modifier to include system objects\&.
.RE
.PP
\edes[+] [ \fIpattern\fR ]
.RS 4
Lists foreign servers (mnemonic:
\(lqexternal servers\(rq)\&. If
\fIpattern\fR
is specified, only those servers whose name matches the pattern are listed\&. If the form
\edes+
is used, a full description of each server is shown, including the server\(aqs ACL, type, version, and options\&.
.RE
.PP
\edeu[+] [ \fIpattern\fR ]
.RS 4
Lists user mappings (mnemonic:
\(lqexternal users\(rq)\&. If
\fIpattern\fR
is specified, only those mappings whose user names match the pattern are listed\&. If the form
\edeu+
is used, additional information about each mapping is shown\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBCaution\fR
.ps -1
.br
\edeu+
might also display the user name and password of the remote user, so care should be taken not to disclose them\&.
.sp .5v
.RE
.RE
.PP
\edew[+] [ \fIpattern\fR ]
.RS 4
Lists foreign\-data wrappers (mnemonic:
\(lqexternal wrappers\(rq)\&. If
\fIpattern\fR
is specified, only those foreign\-data wrappers whose name matches the pattern are listed\&. If the form
\edew+
is used, the ACL and options of the foreign\-data wrapper are also shown\&.
.RE
.PP
\edf[antwS+] [ \fIpattern\fR ]
.RS 4
Lists functions, together with their arguments, return types, and function types, which are classified as
\(lqagg\(rq
(aggregate),
\(lqnormal\(rq,
\(lqtrigger\(rq, or
\(lqwindow\(rq\&. To display only functions of specific type(s), add the corresponding letters
a,
n,
t, or
w
to the command\&. If
\fIpattern\fR
is specified, only functions whose names match the pattern are shown\&. If the form
\edf+
is used, additional information about each function, including volatility, language, source code and description, is shown\&. By default, only user\-created objects are shown; supply a pattern or the
S
modifier to include system objects\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBTip\fR
.ps -1
.br
To look up functions taking arguments or returning values of a specific type, use your pager\(aqs search capability to scroll through the
\edf
output\&.
.sp .5v
.RE
.RE
.PP
\edF[+] [ \fIpattern\fR ]
.RS 4
Lists text search configurations\&. If
\fIpattern\fR
is specified, only configurations whose names match the pattern are shown\&. If the form
\edF+
is used, a full description of each configuration is shown, including the underlying text search parser and the dictionary list for each parser token type\&.
.RE
.PP
\edFd[+] [ \fIpattern\fR ]
.RS 4
Lists text search dictionaries\&. If
\fIpattern\fR
is specified, only dictionaries whose names match the pattern are shown\&. If the form
\edFd+
is used, additional information is shown about each selected dictionary, including the underlying text search template and the option values\&.
.RE
.PP
\edFp[+] [ \fIpattern\fR ]
.RS 4
Lists text search parsers\&. If
\fIpattern\fR
is specified, only parsers whose names match the pattern are shown\&. If the form
\edFp+
is used, a full description of each parser is shown, including the underlying functions and the list of recognized token types\&.
.RE
.PP
\edFt[+] [ \fIpattern\fR ]
.RS 4
Lists text search templates\&. If
\fIpattern\fR
is specified, only templates whose names match the pattern are shown\&. If the form
\edFt+
is used, additional information is shown about each template, including the underlying function names\&.
.RE
.PP
\edg[+] [ \fIpattern\fR ]
.RS 4
Lists database roles\&. If
\fIpattern\fR
is specified, only those roles whose names match the pattern are listed\&. (This command is now effectively the same as
\edu)\&. If the form
\edg+
is used, additional information is shown about each role, including the comment for each role\&.
.RE
.PP
\edi[S+] [ \fIpattern\fR ], \eds[S+] [ \fIpattern\fR ], \edt[S+] [ \fIpattern\fR ], \edv[S+] [ \fIpattern\fR ]
.RS 4
In this group of commands, the letters
i,
s,
t, and
v
stand for index, sequence, table, and view, respectively\&. You can specify any or all of these letters, in any order, to obtain a listing of objects of these types\&. For example,
\edit
lists indexes and tables\&. If
+
is appended to the command name, each object is listed with its physical size on disk and its associated description, if any\&. If
\fIpattern\fR
is specified, only objects whose names match the pattern are listed\&. By default, only user\-created objects are shown; supply a pattern or the
S
modifier to include system objects\&.
.RE
.PP
\edl
.RS 4
This is an alias for
\elo_list, which shows a list of large objects\&.
.RE
.PP
\edn[+] [ \fIpattern\fR ]
.RS 4
Lists schemas (namespaces)\&. If
\fIpattern\fR
is specified, only schemas whose names match the pattern are listed\&. Non\-local temporary schemas are suppressed\&. If
+
is appended to the command name, each object is listed with its associated permissions and description, if any\&.
.RE
.PP
\edo[S] [ \fIpattern\fR ]
.RS 4
Lists operators with their operand and return types\&. If
\fIpattern\fR
is specified, only operators whose names match the pattern are listed\&. By default, only user\-created objects are shown; supply a pattern or the
S
modifier to include system objects\&.
.RE
.PP
\edp [ \fIpattern\fR ]
.RS 4
Lists tables, views and sequences with their associated access privileges\&. If
\fIpattern\fR
is specified, only tables, views and sequences whose names match the pattern are listed\&.
.sp
The
\fBGRANT\fR(7)
and
\fBREVOKE\fR(7)
commands are used to set access privileges\&. The meaning of the privilege display is explained under
\fBGRANT\fR(7)\&.
.RE
.PP
\edrds [ \fIrole\-pattern\fR [ \fIdatabase\-pattern\fR ] ]
.RS 4
Lists defined configuration settings\&. These settings can be role\-specific, database\-specific, or both\&.
\fIrole\-pattern\fR
and
\fIdatabase\-pattern\fR
are used to select specific roles and databases to list, respectively\&. If omitted, or if
*
is specified, all settings are listed, including those not role\-specific or database\-specific, respectively\&.
.sp
The
ALTER ROLE (\fBALTER_ROLE\fR(7))
and
ALTER DATABASE (\fBALTER_DATABASE\fR(7))
commands are used to define per\-role and per\-database configuration settings\&.
.RE
.PP
\edT[S+] [ \fIpattern\fR ]
.RS 4
Lists data types\&. If
\fIpattern\fR
is specified, only types whose names match the pattern are listed\&. If
+
is appended to the command name, each type is listed with its internal name and size, as well as its allowed values if it is an
enum
type\&. By default, only user\-created objects are shown; supply a pattern or the
S
modifier to include system objects\&.
.RE
.PP
\edu[+] [ \fIpattern\fR ]
.RS 4
Lists database roles\&. If
\fIpattern\fR
is specified, only those roles whose names match the pattern are listed\&. If the form
\edu+
is used, additional information is shown about each role, including the comment for each role\&.
.RE
.PP
\eedit (or \ee) [ \fIfilename\fR ]
.RS 4
If
\fIfilename\fR
is specified, the file is edited; after the editor exits, its content is copied back to the query buffer\&. If no argument is given, the current query buffer is copied to a temporary file which is then edited in the same fashion\&.
.sp
The new query buffer is then re\-parsed according to the normal rules of
psql, where the whole buffer is treated as a single line\&. (Thus you cannot make scripts this way\&. Use
\ei
for that\&.) This means also that if the query ends with (or rather contains) a semicolon, it is immediately executed\&. In other cases it will merely wait in the query buffer\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBTip\fR
.ps -1
.br
psql
searches the environment variables
\fBPSQL_EDITOR\fR,
\fBEDITOR\fR, and
\fBVISUAL\fR
(in that order) for an editor to use\&. If all of them are unset,
vi
is used on Unix systems,
notepad\&.exe
on Windows systems\&.
.sp .5v
.RE
.RE
.PP
\eef [ \fIfunction_description\fR ]
.RS 4
This command fetches and edits the definition of the named function, in the form of a
CREATE OR REPLACE FUNCTION
command\&. Editing is done in the same way as for
\ee\&. After the editor exits, the updated command waits in the query buffer; type semicolon or
\eg
to send it, or
\er
to cancel\&.
.sp
The target function can be specified by name alone, or by name and arguments, for example
foo(integer, text)\&. The argument types must be given if there is more than one function of the same name\&.
.sp
If no function is specified, a blank
CREATE FUNCTION
template is presented for editing\&.
.RE
.PP
\eecho \fItext\fR [ \&.\&.\&. ]
.RS 4
Prints the arguments to the standard output, separated by one space and followed by a newline\&. This can be useful to intersperse information in the output of scripts\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
=> \fB\eecho `date`\fR
Tue Oct 26 21:40:57 CEST 1999
.fi
.if n \{\
.RE
.\}
.sp
If the first argument is an unquoted
\-n
the trailing newline is not written\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBTip\fR
.ps -1
.br
If you use the
\eo
command to redirect your query output you might wish to use
\eqecho
instead of this command\&.
.sp .5v
.RE
.RE
.PP
\eencoding [ \fIencoding\fR ]
.RS 4
Sets the client character set encoding\&. Without an argument, this command shows the current encoding\&.
.RE
.PP
\ef [ \fIstring\fR ]
.RS 4
Sets the field separator for unaligned query output\&. The default is the vertical bar (|)\&. See also
\epset
for a generic way of setting output options\&.
.RE
.PP
\eg [ { \fIfilename\fR | |\fIcommand\fR } ]
.RS 4
Sends the current query input buffer to the server and optionally stores the query\(aqs output in
\fIfilename\fR
or pipes the output into a separate Unix shell executing
\fIcommand\fR\&. A bare
\eg
is virtually equivalent to a semicolon\&. A
\eg
with argument is a
\(lqone\-shot\(rq
alternative to the
\eo
command\&.
.RE
.PP
\ehelp (or \eh) [ \fIcommand\fR ]
.RS 4
Gives syntax help on the specified
SQL
command\&. If
\fIcommand\fR
is not specified, then
psql
will list all the commands for which syntax help is available\&. If
\fIcommand\fR
is an asterisk (*), then syntax help on all
SQL
commands is shown\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
To simplify typing, commands that consists of several words do not have to be quoted\&. Thus it is fine to type
\fB\ehelp alter table\fR\&.
.sp .5v
.RE
.RE
.PP
\eH
.RS 4
Turns on
HTML
query output format\&. If the
HTML
format is already on, it is switched back to the default aligned text format\&. This command is for compatibility and convenience, but see
\epset
about setting other output options\&.
.RE
.PP
\ei \fIfilename\fR
.RS 4
Reads input from the file
\fIfilename\fR
and executes it as though it had been typed on the keyboard\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
If you want to see the lines on the screen as they are read you must set the variable
\fIECHO\fR
to
all\&.
.sp .5v
.RE
.RE
.PP
\el (or \elist), \el+ (or \elist+)
.RS 4
List the names, owners, character set encodings, and access privileges of all the databases in the server\&. If
+
is appended to the command name, database sizes, default tablespaces, and descriptions are also displayed\&. (Size information is only available for databases that the current user can connect to\&.)
.RE
.PP
\elo_export \fIloid\fR \fIfilename\fR
.RS 4
Reads the large object with
OID\fIloid\fR
from the database and writes it to
\fIfilename\fR\&. Note that this is subtly different from the server function
\fBlo_export\fR, which acts with the permissions of the user that the database server runs as and on the server\(aqs file system\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBTip\fR
.ps -1
.br
Use
\elo_list
to find out the large object\(aqs
OID\&.
.sp .5v
.RE
.RE
.PP
\elo_import \fIfilename\fR [ \fIcomment\fR ]
.RS 4
Stores the file into a
PostgreSQL
large object\&. Optionally, it associates the given comment with the object\&. Example:
.sp
.if n \{\
.RS 4
.\}
.nf
foo=> \fB\elo_import \(aq/home/peter/pictures/photo\&.xcf\(aq \(aqa picture of me\(aq\fR
lo_import 152801
.fi
.if n \{\
.RE
.\}
.sp
The response indicates that the large object received object ID 152801, which can be used to access the newly\-created large object in the future\&. For the sake of readability, it is recommended to always associate a human\-readable comment with every object\&. Both OIDs and comments can be viewed with the
\elo_list
command\&.
.sp
Note that this command is subtly different from the server\-side
\fBlo_import\fR
because it acts as the local user on the local file system, rather than the server\(aqs user and file system\&.
.RE
.PP
\elo_list
.RS 4
Shows a list of all
PostgreSQL
large objects currently stored in the database, along with any comments provided for them\&.
.RE
.PP
\elo_unlink \fIloid\fR
.RS 4
Deletes the large object with
OID\fIloid\fR
from the database\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBTip\fR
.ps -1
.br
Use
\elo_list
to find out the large object\(aqs
OID\&.
.sp .5v
.RE
.RE
.PP
\eo [ {\fIfilename\fR | |\fIcommand\fR} ]
.RS 4
Saves future query results to the file
\fIfilename\fR
or pipes future results into a separate Unix shell to execute
\fIcommand\fR\&. If no arguments are specified, the query output will be reset to the standard output\&.
.sp
\(lqQuery results\(rq
includes all tables, command responses, and notices obtained from the database server, as well as output of various backslash commands that query the database (such as
\ed), but not error messages\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBTip\fR
.ps -1
.br
To intersperse text output in between query results, use
\eqecho\&.
.sp .5v
.RE
.RE
.PP
\ep
.RS 4
Print the current query buffer to the standard output\&.
.RE
.PP
\epassword [ \fIusername\fR ]
.RS 4
Changes the password of the specified user (by default, the current user)\&. This command prompts for the new password, encrypts it, and sends it to the server as an
ALTER ROLE
command\&. This makes sure that the new password does not appear in cleartext in the command history, the server log, or elsewhere\&.
.RE
.PP
\eprompt [ \fItext\fR ] \fIname\fR
.RS 4
Prompts the user to set variable
\fIname\fR\&. An optional prompt,
\fItext\fR, can be specified\&. (For multiword prompts, use single quotes\&.)
.sp
By default,
\eprompt
uses the terminal for input and output\&. However, if the
\fB\-f\fR
command line switch is used,
\eprompt
uses standard input and standard output\&.
.RE
.PP
\epset \fIoption\fR [ \fIvalue\fR ]
.RS 4
This command sets options affecting the output of query result tables\&.
\fIoption\fR
indicates which option is to be set\&. The semantics of
\fIvalue\fR
vary depending on the selected option\&. For some options, omitting
\fIvalue\fR
causes the option to be toggled or unset, as described under the particular option\&. If no such behavior is mentioned, then omitting
\fIvalue\fR
just results in the current setting being displayed\&.
.sp
Adjustable printing options are:
.PP
format
.RS 4
Sets the output format to one of
unaligned,
aligned,
wrapped,
html,
latex, or
troff\-ms\&. Unique abbreviations are allowed\&. (That would mean one letter is enough\&.)
.sp
unaligned
format writes all columns of a row on one line, separated by the currently active field separator\&. This is useful for creating output that might be intended to be read in by other programs (for example, tab\-separated or comma\-separated format)\&.
.sp
aligned
format is the standard, human\-readable, nicely formatted text output; this is the default\&.
.sp
wrapped
format is like
aligned
but wraps wide data values across lines to make the output fit in the target column width\&. The target width is determined as described under the
columns
option\&. Note that
psql
will not attempt to wrap column header titles; therefore,
wrapped
format behaves the same as
aligned
if the total width needed for column headers exceeds the target\&.
.sp
The
html,
latex, and
troff\-ms
formats put out tables that are intended to be included in documents using the respective mark\-up language\&. They are not complete documents! (This might not be so dramatic in
HTML, but in LaTeX you must have a complete document wrapper\&.)
.RE
.PP
columns
.RS 4
Sets the target width for the
wrapped
format, and also the width limit for determining whether output is wide enough to require the pager\&. Zero (the default) causes the target width to be controlled by the environment variable
\fBCOLUMNS\fR, or the detected screen width if
\fBCOLUMNS\fR
is not set\&. In addition, if
columns
is zero then the
wrapped
format only affects screen output\&. If
columns
is nonzero then file and pipe output is wrapped to that width as well\&.
.RE
.PP
border
.RS 4
The
\fIvalue\fR
must be a number\&. In general, the higher the number the more borders and lines the tables will have, but this depends on the particular format\&. In
HTML
format, this will translate directly into the
border=\&.\&.\&.
attribute; in the other formats only values 0 (no border), 1 (internal dividing lines), and 2 (table frame) make sense\&.
.RE
.PP
linestyle
.RS 4
Sets the border line drawing style to one of
ascii,
old\-ascii
or
unicode\&. Unique abbreviations are allowed\&. (That would mean one letter is enough\&.) The default setting is
ascii\&. This option only affects the
aligned
and
wrapped
output formats\&.
.sp
ascii
style uses plain
ASCII
characters\&. Newlines in data are shown using a
+
symbol in the right\-hand margin\&. When the
wrapped
format wraps data from one line to the next without a newline character, a dot (\&.) is shown in the right\-hand margin of the first line, and again in the left\-hand margin of the following line\&.
.sp
old\-ascii
style uses plain
ASCII
characters, using the formatting style used in
PostgreSQL
8\&.4 and earlier\&. Newlines in data are shown using a
:
symbol in place of the left\-hand column separator\&. When the data is wrapped from one line to the next without a newline character, a
;
symbol is used in place of the left\-hand column separator\&.
.sp
unicode
style uses Unicode box\-drawing characters\&. Newlines in data are shown using a carriage return symbol in the right\-hand margin\&. When the data is wrapped from one line to the next without a newline character, an ellipsis symbol is shown in the right\-hand margin of the first line, and again in the left\-hand margin of the following line\&.
.sp
When the
border
setting is greater than zero, this option also determines the characters with which the border lines are drawn\&. Plain
ASCII
characters work everywhere, but Unicode characters look nicer on displays that recognize them\&.
.RE
.PP
expanded (or x)
.RS 4
If
\fIvalue\fR
is specified it must be either
on
or
off
which will enable or disable expanded mode\&. If
\fIvalue\fR
is omitted the command toggles between regular and expanded mode\&. When expanded mode is enabled, query results are displayed in two columns, with the column name on the left and the data on the right\&. This mode is useful if the data wouldn\(aqt fit on the screen in the normal
\(lqhorizontal\(rq
mode\&.
.RE
.PP
null
.RS 4
Sets the string to be printed in place of a null value\&. The default is to print nothing, which can easily be mistaken for an empty string\&. For example, one might prefer
\epset null \(aq(null)\(aq\&.
.RE
.PP
fieldsep
.RS 4
Specifies the field separator to be used in unaligned output format\&. That way one can create, for example, tab\- or comma\-separated output, which other programs might prefer\&. To set a tab as field separator, type
\epset fieldsep \(aq\et\(aq\&. The default field separator is
\(aq|\(aq
(a vertical bar)\&.
.RE
.PP
footer
.RS 4
If
\fIvalue\fR
is specified it must be either
on
or
off
which will enable or disable display of the table footer (the
(\fIn\fR rows)
count)\&. If
\fIvalue\fR
is omitted the command toggles footer display on or off\&.
.RE
.PP
numericlocale
.RS 4
If
\fIvalue\fR
is specified it must be either
on
or
off
which will enable or disable display of a locale\-specific character to separate groups of digits to the left of the decimal marker\&. If
\fIvalue\fR
is omitted the command toggles between regular and locale\-specific numeric output\&.
.RE
.PP
recordsep
.RS 4
Specifies the record (line) separator to use in unaligned output format\&. The default is a newline character\&.
.RE
.PP
tuples_only (or t)
.RS 4
If
\fIvalue\fR
is specified it must be either
on
or
off
which will enable or disable tuples\-only mode\&. If
\fIvalue\fR
is omitted the command toggles between regular and tuples\-only output\&. Regular output includes extra information such as column headers, titles, and various footers\&. In tuples\-only mode, only actual table data is shown\&.
.RE
.PP
title
.RS 4
Sets the table title for any subsequently printed tables\&. This can be used to give your output descriptive tags\&. If no
\fIvalue\fR
is given, the title is unset\&.
.RE
.PP
tableattr (or T)
.RS 4
Specifies attributes to be placed inside the
HTMLtable
tag in
html
output format\&. This could for example be
cellpadding
or
bgcolor\&. Note that you probably don\(aqt want to specify
border
here, as that is already taken care of by
\epset border\&. If no
\fIvalue\fR
is given, the table attributes are unset\&.
.RE
.PP
pager
.RS 4
Controls use of a pager program for query and
psql
help output\&. If the environment variable
\fBPAGER\fR
is set, the output is piped to the specified program\&. Otherwise a platform\-dependent default (such as
more) is used\&.
.sp
When the
pager
option is
off, the pager program is not used\&. When the
pager
option is
on, the pager is used when appropriate, i\&.e\&., when the output is to a terminal and will not fit on the screen\&. The
pager
option can also be set to
always, which causes the pager to be used for all terminal output regardless of whether it fits on the screen\&.
\epset pager
without a
\fIvalue\fR
toggles pager use on and off\&.
.RE
.sp
Illustrations of how these different formats look can be seen in the
EXAMPLES
section\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBTip\fR
.ps -1
.br
There are various shortcut commands for
\epset\&. See
\ea,
\eC,
\eH,
\et,
\eT, and
\ex\&.
.sp .5v
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
It is an error to call
\epset
without any arguments\&. In the future this case might show the current status of all printing options\&.
.sp .5v
.RE
.RE
.PP
\eq
.RS 4
Quits the
psql
program\&.
.RE
.PP
\eqecho \fItext\fR [ \&.\&.\&. ]
.RS 4
This command is identical to
\eecho
except that the output will be written to the query output channel, as set by
\eo\&.
.RE
.PP
\er
.RS 4
Resets (clears) the query buffer\&.
.RE
.PP
\es [ \fIfilename\fR ]
.RS 4
Print or save the command line history to
\fIfilename\fR\&. If
\fIfilename\fR
is omitted, the history is written to the standard output\&. This option is only available if
psql
is configured to use the
GNUReadline
library\&.
.RE
.PP
\eset [ \fIname\fR [ \fIvalue\fR [ \&.\&.\&. ] ] ]
.RS 4
Sets the internal variable
\fIname\fR
to
\fIvalue\fR
or, if more than one value is given, to the concatenation of all of them\&. If no second argument is given, the variable is just set with no value\&. To unset a variable, use the
\eunset
command\&.
.sp
Valid variable names can contain characters, digits, and underscores\&. See the section
Variables
below for details\&. Variable names are case\-sensitive\&.
.sp
Although you are welcome to set any variable to anything you want,
psql
treats several variables as special\&. They are documented in the section about variables\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
This command is totally separate from the
SQL
command
\fBSET\fR(7)\&.
.sp .5v
.RE
.RE
.PP
\et
.RS 4
Toggles the display of output column name headings and row count footer\&. This command is equivalent to
\epset tuples_only
and is provided for convenience\&.
.RE
.PP
\eT \fItable_options\fR
.RS 4
Specifies attributes to be placed within the
table
tag in
HTML
output format\&. This command is equivalent to
\epset tableattr \fItable_options\fR\&.
.RE
.PP
\etiming [ \fIon\fR | \fIoff\fR ]
.RS 4
Without parameter, toggles a display of how long each SQL statement takes, in milliseconds\&. With parameter, sets same\&.
.RE
.PP
\ew \fIfilename\fR, \ew |\fIcommand\fR
.RS 4
Outputs the current query buffer to the file
\fIfilename\fR
or pipes it to the Unix command
\fIcommand\fR\&.
.RE
.PP
\ex
.RS 4
Toggles expanded table formatting mode\&. As such it is equivalent to
\epset expanded\&.
.RE
.PP
\ez [ \fIpattern\fR ]
.RS 4
Lists tables, views and sequences with their associated access privileges\&. If a
\fIpattern\fR
is specified, only tables, views and sequences whose names match the pattern are listed\&.
.sp
This is an alias for
\edp
(\(lqdisplay privileges\(rq)\&.
.RE
.PP
\e! [ \fIcommand\fR ]
.RS 4
Escapes to a separate Unix shell or executes the Unix command
\fIcommand\fR\&. The arguments are not further interpreted; the shell will see them as\-is\&.
.RE
.PP
\e?
.RS 4
Shows help information about the backslash commands\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBPatterns\fR
.RS 4
.\" patterns: in psql and pg_dump
.PP
The various
\ed
commands accept a
\fIpattern\fR
parameter to specify the object name(s) to be displayed\&. In the simplest case, a pattern is just the exact name of the object\&. The characters within a pattern are normally folded to lower case, just as in SQL names; for example,
\edt FOO
will display the table named
foo\&. As in SQL names, placing double quotes around a pattern stops folding to lower case\&. Should you need to include an actual double quote character in a pattern, write it as a pair of double quotes within a double\-quote sequence; again this is in accord with the rules for SQL quoted identifiers\&. For example,
\edt "FOO""BAR"
will display the table named
FOO"BAR
(not
foo"bar)\&. Unlike the normal rules for SQL names, you can put double quotes around just part of a pattern, for instance
\edt FOO"FOO"BAR
will display the table named
fooFOObar\&.
.PP
Whenever the
\fIpattern\fR
parameter is omitted completely, the
\ed
commands display all objects that are visible in the current schema search path \(em this is equivalent to using
*
as the pattern\&. (An object is said to be
visible
if its containing schema is in the search path and no object of the same kind and name appears earlier in the search path\&. This is equivalent to the statement that the object can be referenced by name without explicit schema qualification\&.) To see all objects in the database regardless of visibility, use
*\&.*
as the pattern\&.
.PP
Within a pattern,
*
matches any sequence of characters (including no characters) and
?
matches any single character\&. (This notation is comparable to Unix shell file name patterns\&.) For example,
\edt int*
displays tables whose names begin with
int\&. But within double quotes,
*
and
?
lose these special meanings and are just matched literally\&.
.PP
A pattern that contains a dot (\&.) is interpreted as a schema name pattern followed by an object name pattern\&. For example,
\edt foo*\&.*bar*
displays all tables whose table name includes
bar
that are in schemas whose schema name starts with
foo\&. When no dot appears, then the pattern matches only objects that are visible in the current schema search path\&. Again, a dot within double quotes loses its special meaning and is matched literally\&.
.PP
Advanced users can use regular\-expression notations such as character classes, for example
[0\-9]
to match any digit\&. All regular expression special characters work as specified in
Section 9.7.3, \(lqPOSIX Regular Expressions\(rq, in the documentation, except for
\&.
which is taken as a separator as mentioned above,
*
which is translated to the regular\-expression notation
\&.*,
?
which is translated to
\&., and
$
which is matched literally\&. You can emulate these pattern characters at need by writing
?
for
\&.,
(\fIR\fR+|)
for
\fIR\fR*, or
(\fIR\fR|)
for
\fIR\fR?\&.
$
is not needed as a regular\-expression character since the pattern must match the whole name, unlike the usual interpretation of regular expressions (in other words,
$
is automatically appended to your pattern)\&. Write
*
at the beginning and/or end if you don\(aqt wish the pattern to be anchored\&. Note that within double quotes, all regular expression special characters lose their special meanings and are matched literally\&. Also, the regular expression special characters are matched literally in operator name patterns (i\&.e\&., the argument of
\edo)\&.
.RE
.SS "Advanced features"
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBVariables\fR
.RS 4
.PP
psql
provides variable substitution features similar to common Unix command shells\&. Variables are simply name/value pairs, where the value can be any string of any length\&. To set variables, use the
psql
meta\-command
\eset:
.sp
.if n \{\
.RS 4
.\}
.nf
testdb=> \fB\eset foo bar\fR
.fi
.if n \{\
.RE
.\}
.sp
sets the variable
foo
to the value
bar\&. To retrieve the content of the variable, precede the name with a colon and use it as the argument of any slash command:
.sp
.if n \{\
.RS 4
.\}
.nf
testdb=> \fB\eecho :foo\fR
bar
.fi
.if n \{\
.RE
.\}
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
The arguments of
\eset
are subject to the same substitution rules as with other commands\&. Thus you can construct interesting references such as
\eset :foo \(aqsomething\(aq
and get
\(lqsoft links\(rq
or
\(lqvariable variables\(rq
of
Perl
or
PHP
fame, respectively\&. Unfortunately (or fortunately?), there is no way to do anything useful with these constructs\&. On the other hand,
\eset bar :foo
is a perfectly valid way to copy a variable\&.
.sp .5v
.RE
.PP
If you call
\eset
without a second argument, the variable is set, with an empty string as value\&. To unset (or delete) a variable, use the command
\eunset\&.
.PP
psql\(aqs internal variable names can consist of letters, numbers, and underscores in any order and any number of them\&. A number of these variables are treated specially by
psql\&. They indicate certain option settings that can be changed at run time by altering the value of the variable or that represent some state of the application\&. Although you can use these variables for any other purpose, this is not recommended, as the program behavior might grow really strange really quickly\&. By convention, all specially treated variables consist of all upper\-case letters (and possibly numbers and underscores)\&. To ensure maximum compatibility in the future, avoid using such variable names for your own purposes\&. A list of all specially treated variables follows\&.
.PP
\fIAUTOCOMMIT\fR
.RS 4
.\" autocommit: psql
When
on
(the default), each SQL command is automatically committed upon successful completion\&. To postpone commit in this mode, you must enter a
BEGIN
or
START TRANSACTION
SQL command\&. When
off
or unset, SQL commands are not committed until you explicitly issue
COMMIT
or
END\&. The autocommit\-off mode works by issuing an implicit
BEGIN
for you, just before any command that is not already in a transaction block and is not itself a
BEGIN
or other transaction\-control command, nor a command that cannot be executed inside a transaction block (such as
VACUUM)\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
In autocommit\-off mode, you must explicitly abandon any failed transaction by entering
ABORT
or
ROLLBACK\&. Also keep in mind that if you exit the session without committing, your work will be lost\&.
.sp .5v
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
The autocommit\-on mode is
PostgreSQL\(aqs traditional behavior, but autocommit\-off is closer to the SQL spec\&. If you prefer autocommit\-off, you might wish to set it in the system\-wide
psqlrc
file or your
~/\&.psqlrc
file\&.
.sp .5v
.RE
.RE
.PP
\fIDBNAME\fR
.RS 4
The name of the database you are currently connected to\&. This is set every time you connect to a database (including program start\-up), but can be unset\&.
.RE
.PP
\fIECHO\fR
.RS 4
If set to
all, all lines entered from the keyboard or from a script are written to the standard output before they are parsed or executed\&. To select this behavior on program start\-up, use the switch
\fB\-a\fR\&. If set to
queries,
psql
merely prints all queries as they are sent to the server\&. The switch for this is
\fB\-e\fR\&.
.RE
.PP
\fIECHO_HIDDEN\fR
.RS 4
When this variable is set and a backslash command queries the database, the query is first shown\&. This way you can study the
PostgreSQL
internals and provide similar functionality in your own programs\&. (To select this behavior on program start\-up, use the switch
\fB\-E\fR\&.) If you set the variable to the value
noexec, the queries are just shown but are not actually sent to the server and executed\&.
.RE
.PP
\fIENCODING\fR
.RS 4
The current client character set encoding\&.
.RE
.PP
\fIFETCH_COUNT\fR
.RS 4
If this variable is set to an integer value > 0, the results of
SELECT
queries are fetched and displayed in groups of that many rows, rather than the default behavior of collecting the entire result set before display\&. Therefore only a limited amount of memory is used, regardless of the size of the result set\&. Settings of 100 to 1000 are commonly used when enabling this feature\&. Keep in mind that when using this feature, a query might fail after having already displayed some rows\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBTip\fR
.ps -1
.br
Although you can use any output format with this feature, the default
aligned
format tends to look bad because each group of
\fIFETCH_COUNT\fR
rows will be formatted separately, leading to varying column widths across the row groups\&. The other output formats work better\&.
.sp .5v
.RE
.RE
.PP
\fIHISTCONTROL\fR
.RS 4
If this variable is set to
ignorespace, lines which begin with a space are not entered into the history list\&. If set to a value of
ignoredups, lines matching the previous history line are not entered\&. A value of
ignoreboth
combines the two options\&. If unset, or if set to any other value than those above, all lines read in interactive mode are saved on the history list\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
This feature was shamelessly plagiarized from
Bash\&.
.sp .5v
.RE
.RE
.PP
\fIHISTFILE\fR
.RS 4
The file name that will be used to store the history list\&. The default value is
~/\&.psql_history\&. For example, putting:
.sp
.if n \{\
.RS 4
.\}
.nf
\eset HISTFILE ~/\&.psql_history\- :DBNAME
.fi
.if n \{\
.RE
.\}
.sp
in
~/\&.psqlrc
will cause
psql
to maintain a separate history for each database\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
This feature was shamelessly plagiarized from
Bash\&.
.sp .5v
.RE
.RE
.PP
\fIHISTSIZE\fR
.RS 4
The number of commands to store in the command history\&. The default value is 500\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
This feature was shamelessly plagiarized from
Bash\&.
.sp .5v
.RE
.RE
.PP
\fIHOST\fR
.RS 4
The database server host you are currently connected to\&. This is set every time you connect to a database (including program start\-up), but can be unset\&.
.RE
.PP
\fIIGNOREEOF\fR
.RS 4
If unset, sending an
EOF
character (usually
Control+D) to an interactive session of
psql
will terminate the application\&. If set to a numeric value, that many
EOF
characters are ignored before the application terminates\&. If the variable is set but has no numeric value, the default is 10\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
This feature was shamelessly plagiarized from
Bash\&.
.sp .5v
.RE
.RE
.PP
\fILASTOID\fR
.RS 4
The value of the last affected OID, as returned from an
INSERT
or
lo_insert
command\&. This variable is only guaranteed to be valid until after the result of the next
SQL
command has been displayed\&.
.RE
.PP
\fION_ERROR_ROLLBACK\fR
.RS 4
.\" rollback: psql
When
on, if a statement in a transaction block generates an error, the error is ignored and the transaction continues\&. When
interactive, such errors are only ignored in interactive sessions, and not when reading script files\&. When
off
(the default), a statement in a transaction block that generates an error aborts the entire transaction\&. The on_error_rollback\-on mode works by issuing an implicit
SAVEPOINT
for you, just before each command that is in a transaction block, and rolls back to the savepoint on error\&.
.RE
.PP
\fION_ERROR_STOP\fR
.RS 4
By default, if non\-interactive scripts encounter an error, such as a malformed
SQL
command or internal meta\-command, processing continues\&. This has been the traditional behavior of
psql
but it is sometimes not desirable\&. If this variable is set, script processing will immediately terminate\&. If the script was called from another script it will terminate in the same fashion\&. If the outermost script was not called from an interactive
psql
session but rather using the
\fB\-f\fR
option,
psql
will return error code 3, to distinguish this case from fatal error conditions (error code 1)\&.
.RE
.PP
\fIPORT\fR
.RS 4
The database server port to which you are currently connected\&. This is set every time you connect to a database (including program start\-up), but can be unset\&.
.RE
.PP
\fIPROMPT1\fR, \fIPROMPT2\fR, \fIPROMPT3\fR
.RS 4
These specify what the prompts
psql
issues should look like\&. See
Prompting
below\&.
.RE
.PP
\fIQUIET\fR
.RS 4
This variable is equivalent to the command line option
\fB\-q\fR\&. It is probably not too useful in interactive mode\&.
.RE
.PP
\fISINGLELINE\fR
.RS 4
This variable is equivalent to the command line option
\fB\-S\fR\&.
.RE
.PP
\fISINGLESTEP\fR
.RS 4
This variable is equivalent to the command line option
\fB\-s\fR\&.
.RE
.PP
\fIUSER\fR
.RS 4
The database user you are currently connected as\&. This is set every time you connect to a database (including program start\-up), but can be unset\&.
.RE
.PP
\fIVERBOSITY\fR
.RS 4
This variable can be set to the values
default,
verbose, or
terse
to control the verbosity of error reports\&.
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBSQL Interpolation\fR
.RS 4
.PP
An additional useful feature of
psql
variables is that you can substitute (\(lqinterpolate\(rq) them into regular
SQL
statements\&.
psql
provides special facilities for ensuring that values used as SQL literals and identifiers are properly escaped\&. The syntax for interpolating a value without any special escaping is again to prepend the variable name with a colon (:):
.sp
.if n \{\
.RS 4
.\}
.nf
testdb=> \fB\eset foo \(aqmy_table\(aq\fR
testdb=> \fBSELECT * FROM :foo;\fR
.fi
.if n \{\
.RE
.\}
.sp
would then query the table
my_table\&. Note that this may be unsafe: the value of the variable is copied literally, so it can even contain unbalanced quotes or backslash commands\&. You must make sure that it makes sense where you put it\&.
.PP
When a value is to be used as an SQL literal or identifier, it is safest to arrange for it to be escaped\&. To escape the value of a variable as an SQL literal, write a colon followed by the variable name in single quotes\&. To escape the value an SQL identifier, write a colon followed by the variable name in double quotes\&. The previous example would be more safely written this way:
.sp
.if n \{\
.RS 4
.\}
.nf
testdb=> \fB\eset foo \(aqmy_table\(aq\fR
testdb=> \fBSELECT * FROM :"foo";\fR
.fi
.if n \{\
.RE
.\}
.sp
Variable interpolation will not be performed into quoted
SQL
entities\&.
.PP
One possible use of this mechanism is to copy the contents of a file into a table column\&. First load the file into a variable and then proceed as above:
.sp
.if n \{\
.RS 4
.\}
.nf
testdb=> \fB\eset content `cat my_file\&.txt`\fR
testdb=> \fBINSERT INTO my_table VALUES (:\(aqcontent\(aq);\fR
.fi
.if n \{\
.RE
.\}
.sp
(Note that this still won\(aqt work if
my_file\&.txt
contains NUL bytes\&. psql does not support embedded NUL bytes in variable values\&.)
.PP
Since colons can legally appear in SQL commands, an apparent attempt at interpolation (such as
:name,
:\(aqname\(aq, or
:"name") is not changed unless the named variable is currently set\&. In any case, you can escape a colon with a backslash to protect it from substitution\&. (The colon syntax for variables is standard
SQL
for embedded query languages, such as
ECPG\&. The colon syntax for array slices and type casts are
PostgreSQL
extensions, hence the conflict\&. The colon syntax for escaping a variable\(aqs value as an SQL literal or identifier is a
psql
extension\&.)
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBPrompting\fR
.RS 4
.PP
The prompts
psql
issues can be customized to your preference\&. The three variables
\fIPROMPT1\fR,
\fIPROMPT2\fR, and
\fIPROMPT3\fR
contain strings and special escape sequences that describe the appearance of the prompt\&. Prompt 1 is the normal prompt that is issued when
psql
requests a new command\&. Prompt 2 is issued when more input is expected during command input because the command was not terminated with a semicolon or a quote was not closed\&. Prompt 3 is issued when you run an
SQLCOPY
command and you are expected to type in the row values on the terminal\&.
.PP
The value of the selected prompt variable is printed literally, except where a percent sign (%) is encountered\&. Depending on the next character, certain other text is substituted instead\&. Defined substitutions are:
.PP
%M
.RS 4
The full host name (with domain name) of the database server, or
[local]
if the connection is over a Unix domain socket, or
[local:\fI/dir/name\fR], if the Unix domain socket is not at the compiled in default location\&.
.RE
.PP
%m
.RS 4
The host name of the database server, truncated at the first dot, or
[local]
if the connection is over a Unix domain socket\&.
.RE
.PP
%>
.RS 4
The port number at which the database server is listening\&.
.RE
.PP
%n
.RS 4
The database session user name\&. (The expansion of this value might change during a database session as the result of the command
SET SESSION AUTHORIZATION\&.)
.RE
.PP
%/
.RS 4
The name of the current database\&.
.RE
.PP
%~
.RS 4
Like
%/, but the output is
~
(tilde) if the database is your default database\&.
.RE
.PP
%#
.RS 4
If the session user is a database superuser, then a
#, otherwise a
>\&. (The expansion of this value might change during a database session as the result of the command
SET SESSION AUTHORIZATION\&.)
.RE
.PP
%R
.RS 4
In prompt 1 normally
=, but
^
if in single\-line mode, and
!
if the session is disconnected from the database (which can happen if
\econnect
fails)\&. In prompt 2 the sequence is replaced by
\-,
*, a single quote, a double quote, or a dollar sign, depending on whether
psql
expects more input because the command wasn\(aqt terminated yet, because you are inside a
/* \&.\&.\&. */
comment, or because you are inside a quoted or dollar\-escaped string\&. In prompt 3 the sequence doesn\(aqt produce anything\&.
.RE
.PP
%x
.RS 4
Transaction status: an empty string when not in a transaction block, or
*
when in a transaction block, or
!
when in a failed transaction block, or
?
when the transaction state is indeterminate (for example, because there is no connection)\&.
.RE
.PP
%\fIdigits\fR
.RS 4
The character with the indicated octal code is substituted\&.
.RE
.PP
%:\fIname\fR:
.RS 4
The value of the
psql
variable
\fIname\fR\&. See the section
Variables
for details\&.
.RE
.PP
%`\fIcommand\fR`
.RS 4
The output of
\fIcommand\fR, similar to ordinary
\(lqback\-tick\(rq
substitution\&.
.RE
.PP
%[ \&.\&.\&. %]
.RS 4
Prompts can contain terminal control characters which, for example, change the color, background, or style of the prompt text, or change the title of the terminal window\&. In order for the line editing features of
Readline
to work properly, these non\-printing control characters must be designated as invisible by surrounding them with
%[
and
%]\&. Multiple pairs of these can occur within the prompt\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
testdb=> \eset PROMPT1 \(aq%[%033[1;33;40m%]%n@%/%R%[%033[0m%]%# \(aq
.fi
.if n \{\
.RE
.\}
.sp
results in a boldfaced (1;) yellow\-on\-black (33;40) prompt on VT100\-compatible, color\-capable terminals\&.
.RE
To insert a percent sign into your prompt, write
%%\&. The default prompts are
\(aq%/%R%# \(aq
for prompts 1 and 2, and
\(aq>> \(aq
for prompt 3\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
This feature was shamelessly plagiarized from
tcsh\&.
.sp .5v
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBCommand-Line Editing\fR
.RS 4
.PP
psql
supports the
Readline
library for convenient line editing and retrieval\&. The command history is automatically saved when
psql
exits and is reloaded when
psql
starts up\&. Tab\-completion is also supported, although the completion logic makes no claim to be an
SQL
parser\&. If for some reason you do not like the tab completion, you can turn it off by putting this in a file named
\&.inputrc
in your home directory:
.sp
.if n \{\
.RS 4
.\}
.nf
$if psql
set disable\-completion on
$endif
.fi
.if n \{\
.RE
.\}
.sp
(This is not a
psql
but a
Readline
feature\&. Read its documentation for further details\&.)
.RE
.SH "ENVIRONMENT"
.PP
\fBCOLUMNS\fR
.RS 4
If
\epset columns
is zero, controls the width for the
wrapped
format and width for determining if wide output requires the pager\&.
.RE
.PP
\fBPAGER\fR
.RS 4
If the query results do not fit on the screen, they are piped through this command\&. Typical values are
more
or
less\&. The default is platform\-dependent\&. The use of the pager can be disabled by using the
\epset
command\&.
.RE
.PP
\fBPGDATABASE\fR, \fBPGHOST\fR, \fBPGPORT\fR, \fBPGUSER\fR
.RS 4
Default connection parameters (see
Section 31.13, \(lqEnvironment Variables\(rq, in the documentation)\&.
.RE
.PP
\fBPSQL_EDITOR\fR, \fBEDITOR\fR, \fBVISUAL\fR
.RS 4
Editor used by the
\ee
command\&. The variables are examined in the order listed; the first that is set is used\&.
.RE
.PP
\fBSHELL\fR
.RS 4
Command executed by the
\e!
command\&.
.RE
.PP
\fBTMPDIR\fR
.RS 4
Directory for storing temporary files\&. The default is
/tmp\&.
.RE
.PP
This utility, like most other
PostgreSQL
utilities, also uses the environment variables supported by
libpq
(see
Section 31.13, \(lqEnvironment Variables\(rq, in the documentation)\&.
.SH "FILES"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Unless it is passed an
\fB\-X\fR
or
\fB\-c\fR
option,
psql
attempts to read and execute commands from the system\-wide
psqlrc
file and the user\(aqs
~/\&.psqlrc
file before starting up\&. (On Windows, the user\(aqs startup file is named
%APPDATA%\epostgresql\epsqlrc\&.conf\&.) See
\fIPREFIX\fR/share/psqlrc\&.sample
for information on setting up the system\-wide file\&. It could be used to set up the client or the server to taste (using the
\eset
and
SET
commands)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Both the system\-wide
psqlrc
file and the user\(aqs
~/\&.psqlrc
file can be made version\-specific by appending a dash and the
PostgreSQL
release number, for example
~/\&.psqlrc\-9\&.0\&.0\&. A matching version\-specific file will be read in preference to a non\-version\-specific file\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The command\-line history is stored in the file
~/\&.psql_history, or
%APPDATA%\epostgresql\epsql_history
on Windows\&.
.RE
.SH "NOTES"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
In an earlier life
psql
allowed the first argument of a single\-letter backslash command to start directly after the command, without intervening whitespace\&. As of
PostgreSQL
8\&.4 this is no longer allowed\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
psql
is only guaranteed to work smoothly with servers of the same version\&. That does not mean other combinations will fail outright, but subtle and not\-so\-subtle problems might come up\&. Backslash commands are particularly likely to fail if the server is of a newer version than
psql
itself\&. However, backslash commands of the
\ed
family should work with servers of versions back to 7\&.4, though not necessarily with servers newer than
psql
itself\&.
.RE
.SH "NOTES FOR WINDOWS USERS"
.PP
psql
is built as a
\(lqconsole application\(rq\&. Since the Windows console windows use a different encoding than the rest of the system, you must take special care when using 8\-bit characters within
psql\&. If
psql
detects a problematic console code page, it will warn you at startup\&. To change the console code page, two things are necessary:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Set the code page by entering
\fBcmd\&.exe /c chcp 1252\fR\&. (1252 is a code page that is appropriate for German; replace it with your value\&.) If you are using Cygwin, you can put this command in
/etc/profile\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Set the console font to
Lucida Console, because the raster font does not work with the ANSI code page\&.
.RE
.SH "EXAMPLES"
.PP
The first example shows how to spread a command over several lines of input\&. Notice the changing prompt:
.sp
.if n \{\
.RS 4
.\}
.nf
testdb=> \fBCREATE TABLE my_table (\fR
testdb(> \fB first integer not null default 0,\fR
testdb(> \fB second text)\fR
testdb\-> \fB;\fR
CREATE TABLE
.fi
.if n \{\
.RE
.\}
.sp
Now look at the table definition again:
.sp
.if n \{\
.RS 4
.\}
.nf
testdb=> \fB\ed my_table\fR
             Table "my_table"
 Attribute |  Type   |      Modifier
\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
 first     | integer | not null default 0
 second    | text    |
.fi
.if n \{\
.RE
.\}
.sp
Now we change the prompt to something more interesting:
.sp
.if n \{\
.RS 4
.\}
.nf
testdb=> \fB\eset PROMPT1 \(aq%n@%m %~%R%# \(aq\fR
peter@localhost testdb=>
.fi
.if n \{\
.RE
.\}
.sp
Let\(aqs assume you have filled the table with data and want to take a look at it:
.sp
.if n \{\
.RS 4
.\}
.nf
peter@localhost testdb=> SELECT * FROM my_table;
 first | second
\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-
     1 | one
     2 | two
     3 | three
     4 | four
(4 rows)
.fi
.if n \{\
.RE
.\}
.sp
You can display tables in different ways by using the
\epset
command:
.sp
.if n \{\
.RS 4
.\}
.nf
peter@localhost testdb=> \fB\epset border 2\fR
Border style is 2\&.
peter@localhost testdb=> \fBSELECT * FROM my_table;\fR
+\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-+
| first | second |
+\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-+
|     1 | one    |
|     2 | two    |
|     3 | three  |
|     4 | four   |
+\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-+
(4 rows)

peter@localhost testdb=> \fB\epset border 0\fR
Border style is 0\&.
peter@localhost testdb=> \fBSELECT * FROM my_table;\fR
first second
\-\-\-\-\- \-\-\-\-\-\-
    1 one
    2 two
    3 three
    4 four
(4 rows)

peter@localhost testdb=> \fB\epset border 1\fR
Border style is 1\&.
peter@localhost testdb=> \fB\epset format unaligned\fR
Output format is unaligned\&.
peter@localhost testdb=> \fB\epset fieldsep ","\fR
Field separator is ","\&.
peter@localhost testdb=> \fB\epset tuples_only\fR
Showing only tuples\&.
peter@localhost testdb=> \fBSELECT second, first FROM my_table;\fR
one,1
two,2
three,3
four,4
.fi
.if n \{\
.RE
.\}
.sp
Alternatively, use the short commands:
.sp
.if n \{\
.RS 4
.\}
.nf
peter@localhost testdb=> \fB\ea \et \ex\fR
Output format is aligned\&.
Tuples only is off\&.
Expanded display is on\&.
peter@localhost testdb=> \fBSELECT * FROM my_table;\fR
\-[ RECORD 1 ]\-
first  | 1
second | one
\-[ RECORD 2 ]\-
first  | 2
second | two
\-[ RECORD 3 ]\-
first  | 3
second | three
\-[ RECORD 4 ]\-
first  | 4
second | four
.fi
.if n \{\
.RE
.\}

