'\" t
.\"     Title: CLUSTER
.\"    Author: The PostgreSQL Global Development Group
.\" Generator: DocBook XSL Stylesheets v1.75.1 <http://docbook.sf.net/>
.\"      Date: 2010-09-16
.\"    Manual: PostgreSQL 9.0.0 Documentation
.\"    Source: PostgreSQL 9.0.0
.\"  Language: English
.\"
.TH "CLUSTER" "7" "2010-09-16" "PostgreSQL 9.0.0" "PostgreSQL 9.0.0 Documentation"
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
CLUSTER \- cluster a table according to an index
.\" CLUSTER
.SH "SYNOPSIS"
.sp
.nf
CLUSTER [VERBOSE] \fItable_name\fR [ USING \fIindex_name\fR ]
CLUSTER [VERBOSE]
.fi
.SH "DESCRIPTION"
.PP
CLUSTER
instructs
PostgreSQL
to cluster the table specified by
\fItable_name\fR
based on the index specified by
\fIindex_name\fR\&. The index must already have been defined on
\fItable_name\fR\&.
.PP
When a table is clustered, it is physically reordered based on the index information\&. Clustering is a one\-time operation: when the table is subsequently updated, the changes are not clustered\&. That is, no attempt is made to store new or updated rows according to their index order\&. (If one wishes, one can periodically recluster by issuing the command again\&. Also, setting the table\(aqs
FILLFACTOR
storage parameter to less than 100% can aid in preserving cluster ordering during updates, since updated rows are kept on the same page if enough space is available there\&.)
.PP
When a table is clustered,
PostgreSQL
remembers which index it was clustered by\&. The form
CLUSTER \fItable_name\fR
reclusters the table using the same index as before\&. You can also use the
CLUSTER
or
SET WITHOUT CLUSTER
forms of
ALTER TABLE (\fBALTER_TABLE\fR(7))
to set the index to be used for future cluster operations, or to clear any previous setting\&.
.PP
CLUSTER
without any parameter reclusters all the previously\-clustered tables in the current database that the calling user owns, or all such tables if called by a superuser\&. This form of
CLUSTER
cannot be executed inside a transaction block\&.
.PP
When a table is being clustered, an
ACCESS EXCLUSIVE
lock is acquired on it\&. This prevents any other database operations (both reads and writes) from operating on the table until the
CLUSTER
is finished\&.
.SH "PARAMETERS"
.PP
\fItable_name\fR
.RS 4
The name (possibly schema\-qualified) of a table\&.
.RE
.PP
\fIindex_name\fR
.RS 4
The name of an index\&.
.RE
.PP
VERBOSE
.RS 4
Prints a progress report as each table is clustered\&.
.RE
.SH "NOTES"
.PP
In cases where you are accessing single rows randomly within a table, the actual order of the data in the table is unimportant\&. However, if you tend to access some data more than others, and there is an index that groups them together, you will benefit from using
CLUSTER\&. If you are requesting a range of indexed values from a table, or a single indexed value that has multiple rows that match,
CLUSTER
will help because once the index identifies the table page for the first row that matches, all other rows that match are probably already on the same table page, and so you save disk accesses and speed up the query\&.
.PP
During the cluster operation, a temporary copy of the table is created that contains the table data in the index order\&. Temporary copies of each index on the table are created as well\&. Therefore, you need free space on disk at least equal to the sum of the table size and the index sizes\&.
.PP
Because
CLUSTER
remembers the clustering information, one can cluster the tables one wants clustered manually the first time, and setup a timed event similar to
VACUUM
so that the tables are periodically reclustered\&.
.PP
Because the planner records statistics about the ordering of tables, it is advisable to run
\fBANALYZE\fR(7)
on the newly clustered table\&. Otherwise, the planner might make poor choices of query plans\&.
.PP
There is another way to cluster data\&. The
CLUSTER
command reorders the original table by scanning it using the index you specify\&. This can be slow on large tables because the rows are fetched from the table in index order, and if the table is disordered, the entries are on random pages, so there is one disk page retrieved for every row moved\&. (PostgreSQL
has a cache, but the majority of a big table will not fit in the cache\&.) The other way to cluster a table is to use:
.sp
.if n \{\
.RS 4
.\}
.nf
CREATE TABLE \fInewtable\fR AS
    SELECT * FROM \fItable\fR ORDER BY \fIcolumnlist\fR;
.fi
.if n \{\
.RE
.\}
.sp
which uses the
PostgreSQL
sorting code to produce the desired order; this is usually much faster than an index scan for disordered data\&. Then you drop the old table, use
ALTER TABLE \&.\&.\&. RENAME
to rename
\fInewtable\fR
to the old name, and recreate the table\(aqs indexes\&. The big disadvantage of this approach is that it does not preserve OIDs, constraints, foreign key relationships, granted privileges, and other ancillary properties of the table \(em all such items must be manually recreated\&. Another disadvantage is that this way requires a sort temporary file about the same size as the table itself, so peak disk usage is about three times the table size instead of twice the table size\&.
.SH "EXAMPLES"
.PP
Cluster the table
employees
on the basis of its index
employees_ind:
.sp
.if n \{\
.RS 4
.\}
.nf
CLUSTER employees USING employees_ind;
.fi
.if n \{\
.RE
.\}
.PP
Cluster the
employees
table using the same index that was used before:
.sp
.if n \{\
.RS 4
.\}
.nf
CLUSTER employees;
.fi
.if n \{\
.RE
.\}
.PP
Cluster all tables in the database that have previously been clustered:
.sp
.if n \{\
.RS 4
.\}
.nf
CLUSTER;
.fi
.if n \{\
.RE
.\}
.SH "COMPATIBILITY"
.PP
There is no
CLUSTER
statement in the SQL standard\&.
.PP
The syntax
.sp
.if n \{\
.RS 4
.\}
.nf
CLUSTER \fIindex_name\fR ON \fItable_name\fR
.fi
.if n \{\
.RE
.\}
.sp

is also supported for compatibility with pre\-8\&.3
PostgreSQL
versions\&.
.SH "SEE ALSO"
\fBclusterdb\fR(1)
